/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated using `npm run graphql:types` */
import type * as Types from '../../../generated/types';

import type { JsonObject } from "type-fest";
import gql from 'graphql-tag';
export type CreateEventMutationVariables = Types.Exact<{
  input: Types.EventCreateInput;
}>;


export type CreateEventMutation = { __typename?: 'Mutation', createEvent: { __typename?: 'Event', id: string, name: string, description: string | null, visibility: Types.EventVisibility, status: Types.EventStatus, startDateTime: string, endDateTime: string | null } };

export type CommunityEventsQueryVariables = Types.Exact<{
  communityId: Types.Scalars['String']['input'];
}>;


export type CommunityEventsQuery = { __typename?: 'Query', community: { __typename?: 'Community', id: string, events: Array<{ __typename?: 'Event', id: string, name: string, visibility: Types.EventVisibility, status: Types.EventStatus }> } | null };


export const CreateEvent = gql`
    mutation CreateEvent($input: EventCreateInput!) {
  createEvent(input: $input) {
    id
    name
    description
    visibility
    status
    startDateTime
    endDateTime
  }
}
    `;
export const CommunityEvents = gql`
    query CommunityEvents($communityId: String!) {
  community(id: $communityId) {
    id
    events {
      id
      name
      visibility
      status
    }
  }
}
    `;

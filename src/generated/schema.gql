enum CommnunityStatus {
  active
  inactive
}

"""Representation of a Community"""
type Community {
  description: String
  events: [Event!]!
  id: String!
  name: String
  status: CommnunityStatus!
  users: [User!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Representation of an Event (Events and Users, is what tickets are linked to)
"""
type Event {
  address: String
  community: Community
  description: String
  endDateTime: DateTime
  id: String!
  latitude: String
  longitude: String
  maxAttendees: Int
  meetingURL: String
  name: String!
  startDateTime: DateTime!
  status: EventStatus!
  tags: [Tag!]!
  tickets(input: EventsTicketsSearchInput): [UserTicket!]!
  users: [User!]!
  visibility: EventVisibility!
}

input EventCreateInput {
  address: String
  communityId: String!
  description: String!
  endDateTime: DateTime
  latitude: String
  longitude: String
  maxAttendees: Int!
  meetingURL: String
  name: String!
  startDateTime: DateTime!
  status: EventStatus
  timeZone: String
  visibility: EventVisibility
}

enum EventStatus {
  active
  inactive
}

enum EventVisibility {
  private
  public
  unlisted
}

input EventsSearchInput {
  id: String
  name: String
  startDateTimeFrom: DateTime
  startDateTimeTo: DateTime
  status: EventStatus
  visibility: EventVisibility
}

input EventsTicketsSearchInput {
  approvalStatus: TicketApprovalStatus
  id: String
  paymentStatus: TicketPaymentStatus
  redemptionStatus: TicketRedemptionStatus
  status: TicketStatus
}

type Mutation {
  """Approve a ticket"""
  approvalUserTicket(userTicketId: String!): UserTicket!

  """Cancel a ticket"""
  cancelUserTicket(userTicketId: String!): UserTicket!

  """Create an event"""
  createEvent(input: EventCreateInput!): Event!

  """
  Kickoff the email validation flow. This flow will links an email to a user, create a company if it does not exist, and allows filling data for that email's position
  """
  startWorkEmailValidation(email: String!): WorkEmail!

  """Update a user"""
  updateUser(input: userEditInput!): User!

  """Update a user role"""
  updateUserRoleInCommunity(input: updateUserRoleInCommunityInput!): User!

  """Validates work email for a user"""
  validateWorkEmail(confirmationToken: String!): WorkEmail!
}

input MyTicketsSearchInput {
  approvalStatus: TicketApprovalStatus
  eventId: String
  paymentStatus: TicketPaymentStatus
  redemptionStatus: TicketRedemptionStatus
  status: TicketStatus
}

type Query {
  """Get a list of communities. Filter by name, id, or status"""
  communities(id: String, name: String, status: CommnunityStatus): [Community!]!

  """Get a community by id"""
  community(id: String!): Community

  """Get an event by id"""
  event(id: String!): Event

  """Get a list of events. Filter by name, id, status or date"""
  events(input: EventsSearchInput): [Event!]!

  """Get a list of tickets for the current user"""
  myTickets(input: MyTicketsSearchInput): [UserTicket!]!
  status(name: String): String!

  """Get a list of tags"""
  tags(input: TagSearchInput): [Tag!]!

  """Get a list of users"""
  users: [User!]!

  """Get a workEmail and check if its validated for this user"""
  workEmail(email: String!): WorkEmail!
}

"""
Representation of a tag. Tags can be associated to many things. An event, a community, etc.
"""
type Tag {
  description: String
  id: String!
  name: String
  slug: String!
}

input TagSearchInput {
  description: String
  id: String
  name: String
}

enum TicketApprovalStatus {
  approved
  pending
}

enum TicketPaymentStatus {
  paid
  unpaid
}

enum TicketRedemptionStatus {
  pending
  redeemed
}

enum TicketStatus {
  active
  cancelled
}

"""Representation of a user"""
type User {
  bio: String
  communities: [Community!]!
  id: String!
  lastName: String
  name: String
  username: String!
}

"""Representation of a User ticket"""
type UserTicket {
  approvalStatus: TicketApprovalStatus!
  id: ID!
  paymentStatus: TicketPaymentStatus!
  redemptionStatus: TicketRedemptionStatus!
  status: TicketStatus!
}

"""Representation of a workEmail"""
type WorkEmail {
  id: String!
  isValidated: Boolean!
}

input updateUserRoleInCommunityInput {
  communityId: String!
  id: String!
  role: String!
}

input userEditInput {
  bio: String
  id: String!
  lastName: String
  name: String
  username: String
}
input AcceptTeamInvitationInput {
  teamId: String!
}

input AddPersonToTeamInput {
  teamId: String!
  userEmail: String!
}

"""
Response when adding a user to a team
"""
type AddUserToTeamResponseRef {
  team: TeamRef!
  userIsInOtherTeams: Boolean!
}

"""
Representation of a workEmail
"""
type AllowedCurrency {
  currency: String!
  id: ID!
  validPaymentMethods: ValidPaymentMethods!
}

input CheckForPurchaseOrderInput {
  purchaseOrderId: String!
}

enum CommnunityStatus {
  active
  inactive
}

"""
Representation of a Community
"""
type Community {
  banner: String
  description: String
  events: [Event!]!
  id: ID!
  logo: String
  name: String
  status: CommnunityStatus!
  users: [User!]!
}

"""
Representation of a workEmail
"""
type Company {
  description: String
  domain: String!
  hasBeenUpdated: Boolean!
  id: ID!
  logo: String
  name: String
  salarySubmissions: Int!

  """
  Not available to users
  """
  status: CompanyStatus
  website: String
}

enum CompanyStatus {
  active
  draft
  inactive
}

"""
Representation of a consolidated payment entry log calculation
"""
type ConsolidatedPaymentLogEntry {
  currencyId: String!
  id: ID!
  platform: String!
  totalTransactionAmount: Float!
}

input CreateCommunityInput {
  description: String!
  name: String!
  slug: String!
}

input CreateCompanyInput {
  description: String

  """
  The email domain of the company (What we'll use to match the company to the user on account-creation)
  """
  domain: String!
  logo: String
  name: String
  status: CompanyStatus
  website: String
}

input CreatePlaceholderUsersInput {
  users: [placeHolderUsersInput!]!
}

input CreateSalaryInput {
  amount: Int!
  companyId: String!
  confirmationToken: String!
  countryCode: String!
  currencyCode: String!
  gender: Gender!
  genderOtherText: String!
  typeOfEmployment: TypeOfEmployment!
  workMetodology: WorkMetodology!
  workSeniorityAndRoleId: String!
  yearsOfExperience: Int!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EmailStatus {
  confirmed
  pending
  rejected
}

input EnqueueGoogleAlbumImportInput {
  albumId: String!
  sanityEventId: String!
  token: String!
}

"""
Representation of an Event (Events and Users, is what tickets are linked to)
"""
type Event {
  address: String
  bannerImage: Image
  bannerImageSanityRef: String
  community: Community
  description: String
  endDateTime: DateTime
  galleries: [Gallery!]!
  id: ID!
  images: [SanityAssetRef!]!
  latitude: String
  logoImage: Image
  longitude: String
  meetingURL: String
  mobileBannerImage: Image
  name: String!
  previewImage: Image
  publicShareURL: String
  schedules: [Schedule!]!
  speakers: [Speaker!]!
  startDateTime: DateTime!
  status: EventStatus!
  tags: [Tag!]!
  teams: [TeamRef!]!

  """
  List of tickets for sale or redemption for this event. (If you are looking for a user's tickets, use the usersTickets field)
  """
  tickets(input: EventsTicketTemplateSearchInput): [Ticket!]!
  users: [User!]!

  """
  List of tickets that a user owns for this event.
  """
  usersTickets(input: EventsTicketsSearchInput): [UserTicket!]!
  visibility: EventVisibility!
}

input EventCreateInput {
  address: String
  communityId: String!
  description: String!
  endDateTime: DateTime
  latitude: String
  longitude: String
  meetingURL: String
  name: String!
  startDateTime: DateTime!
  status: EventStatus
  timeZone: String
  visibility: EventVisibility
}

input EventEditInput {
  address: String
  description: String
  endDateTime: DateTime
  eventId: String!
  latitude: String
  longitude: String
  meetingURL: String
  name: String
  startDateTime: DateTime
  status: EventStatus
  timeZone: String
  visibility: EventVisibility
}

"""
Search for tags
"""
input EventImageSearch {
  eventId: String!
}

enum EventStatus {
  active
  inactive
}

enum EventVisibility {
  private
  public
  unlisted
}

input EventsSearchInput {
  id: String
  name: String
  startDateTimeFrom: DateTime
  startDateTimeTo: DateTime
  status: EventStatus
  ticketTags: [String!]
  userHasTickets: Boolean
  visibility: EventVisibility
}

input EventsTicketTemplateSearchInput {
  tags: [String!]
}

input EventsTicketsSearchInput {
  approvalStatus: TicketApprovalStatus
  id: String
  paymentStatus: TicketPaymentStatus
  redemptionStatus: TicketRedemptionStatus
}

input FindUserTicketSearchInput {
  approvalStatus: [TicketApprovalStatus!]
  eventIds: [String!]
  paymentStatus: [TicketPaymentStatus!]
  redemptionStatus: [TicketRedemptionStatus!]
  ticketsIds: [String!]
  userIds: [String!]
  userTicketIds: [String!]
}

"""
Representation of a Gallery, usually associated to an event
"""
type Gallery {
  description: String
  event: Event
  id: ID!
  images: [Image!]!
  name: String!
}

enum Gender {
  Agender
  Female
  Genderfluid
  Genderqueer
  Male
  NonBinary
  Other
  PreferNotToSay
  TransgenderFemale
  TransgenderMale
  TwoSpirit
  empty
}

input GeneratePaymentLinkInput {
  currencyId: String!
}

enum GiftAttemptStatus {
  Accepted
  Cancelled
  Expired
  Pending
  Rejected
}

input GiftInfoInput {
  email: String!
  message: String!
  name: String!
}

type GiftTicketUserInfo {
  email: String!
  name: String
}

input GiftTicketsToUserInput {
  allowMultipleTicketsPerUsers: Boolean!
  autoApproveTickets: Boolean!
  notifyUsers: Boolean!
  ticketIds: [String!]!
  userIds: [String!]!
}

"""
An image, usually associated to a gallery
"""
type Image {
  gallery: Gallery
  hosting: ImageHostingEnum!
  id: ID!
  url: String!
}

enum ImageHostingEnum {
  cloudflare
  sanity
}

type Mutation {
  acceptGiftedTicket(giftId: String!): UserTicket!

  """
  Accept the user's invitation to a team
  """
  acceptTeamInvitation(input: AcceptTeamInvitationInput!): TeamRef!

  """
  Try to add a person to a team
  """
  addPersonToTeam(input: AddPersonToTeamInput!): AddUserToTeamResponseRef!

  """
  Apply to a waitlist
  """
  applyToWaitlist(ticketId: String!): UserTicket!

  """
  Approve a ticket
  """
  approvalUserTicket(userTicketId: String!): UserTicket!

  """
  Cancel a ticket
  """
  cancelUserTicket(userTicketId: String!): UserTicket!

  """
  Check the status of a purchase order
  """
  checkPurchaseOrderStatus(input: CheckForPurchaseOrderInput!): PurchaseOrder!

  """
  Attempt to claim and/or gift tickets
  """
  claimUserTicket(input: TicketClaimInput!): RedeemUserTicketResponse!

  """
  Create an community
  """
  createCommunity(input: CreateCommunityInput!): Community!

  """
  Create a company
  """
  createCompany(input: CreateCompanyInput!): Company!

  """
  Create an event
  """
  createEvent(input: EventCreateInput!): Event!

  """
  Create placeholder users (used for things like invitations)
  """
  createPlaceholderdUsers(input: CreatePlaceholderUsersInput!): [User!]!

  """
  Create a salary
  """
  createSalary(input: CreateSalaryInput!): Salary!

  """
  Create a team, associated to a specific event
  """
  createTeam(input: TeamCreateInput!): TeamRef!

  """
  Create a ticket
  """
  createTicket(input: TicketCreateInput!): Ticket!

  """
  Try to add a person to a team
  """
  deletePersonFomTeam(input: RemovePersonFromTeamInput!): TeamRef!

  """
  Edit an community
  """
  editCommunity(input: UpdateCommunityInput!): Community!

  """
  Edit an event
  """
  editEvent(input: EventEditInput!): Event!

  """
  Edit a ticket
  """
  editTicket(input: TicketEditInput!): Ticket!

  """
  Enqueue images to import
  """
  enqueueGoogleAlbumImport(input: EnqueueGoogleAlbumImportInput!): Boolean!

  """
  Gift tickets to users, allowing multiple tickets per user, and conditionally notify them
  """
  giftTicketsToUsers(input: GiftTicketsToUserInput!): [UserTicket!]!

  """
  Create a purchase order
  """
  payForPurchaseOrder(input: PayForPurchaseOrderInput!): PurchaseOrder!

  """
  Redeem a ticket
  """
  redeemUserTicket(userTicketId: String!): UserTicket!

  """
  Reject the user's invitation to a team
  """
  rejectTeamInvitation(input: RejectTeamInvitationInput!): TeamRef!

  """
  Kickoff the email validation flow. This flow will links an email to a user, create a company if it does not exist, and allows filling data for that email's position
  """
  startWorkEmailValidation(email: String!): WorkEmail!
  triggerUserTicketApprovalReview(
    eventId: String!
    userId: String!
  ): [UserTicket!]!

  """
  Update a company
  """
  updateCompany(input: UpdateCompanyInput!): Company!
  updateMyUserData(input: updateUserDataInput!): User!

  """
  Create a salary
  """
  updateSalary(input: UpdateSalaryInput!): Salary!

  """
  Updates a team information
  """
  updateTeam(input: UpdateTeamInput!): TeamRef!

  """
  Update a user
  """
  updateUser(input: userEditInput!): User!

  """
  Update a user role
  """
  updateUserRoleInCommunity(input: updateUserRoleInCommunityInput!): User!

  """
  Validates work email for a user
  """
  validateWorkEmail(confirmationToken: String!): WorkEmail!
}

input MyPurchaseOrdersInput {
  paymentPlatform: String
}

input MyTicketsSearchValues {
  approvalStatus: [TicketApprovalStatus!]
  eventId: String
  paymentStatus: [TicketPaymentStatus!]
  redemptionStatus: [TicketRedemptionStatus!]
}

"""
Type used for querying the paginated leaves and it's paginated meta data
"""
type PaginatedEvent {
  data: [Event!]!
  pagination: Pagination!
}

input PaginatedInputEventsSearchInput {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: EventsSearchInput
}

input PaginatedInputFindUserTicketSearchInput {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: FindUserTicketSearchInput
}

input PaginatedInputMyPurchaseOrdersInput {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: MyPurchaseOrdersInput
}

input PaginatedInputMyTicketsSearchValues {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: MyTicketsSearchValues
}

input PaginatedInputTeamSearchValues {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: TeamSearchValues
}

input PaginatedInputUserSearchValues {
  pagination: PaginationSearchInputParams! = { page: 0, pageSize: 20 }
  search: UserSearchValues
}

"""
Type used for querying the paginated leaves and it's paginated meta data
"""
type PaginatedPurchaseOrder {
  data: [PurchaseOrder!]!
  pagination: Pagination!
}

"""
Type used for querying the paginated leaves and it's paginated meta data
"""
type PaginatedTeamRef {
  data: [TeamRef!]!
  pagination: Pagination!
}

"""
Type used for querying the paginated leaves and it's paginated meta data
"""
type PaginatedUser {
  data: [User!]!
  pagination: Pagination!
}

"""
Type used for querying the paginated leaves and it's paginated meta data
"""
type PaginatedUserTicket {
  data: [UserTicket!]!
  pagination: Pagination!
}

"""
Pagination meta data
"""
type Pagination {
  currentPage: Int!
  pageSize: Int!
  totalPages: Int!
  totalRecords: Int!
}

input PaginationSearchInputParams {
  """
  Page number, starts at 0
  """
  page: Int!
  pageSize: Int!
}

enum ParticipationStatus {
  accepted
  not_accepted
  waiting_resolution
}

input PayForPurchaseOrderInput {
  currencyID: String!
  purchaseOrderId: String!
}

"""
Representation of a TicketPrice
"""
type Price {
  amount: Int!
  currency: AllowedCurrency!
  id: ID!
}

input PricingInputField {
  currencyId: String!

  """
  The price. But in cents, so for a $10 ticket, you'd pass 1000 (or 10_00), or for 1000 chilean pesos, you'd pass 1000_00
  """
  value_in_cents: Int!
}

enum PronounsEnum {
  empty
  heHim
  other
  sheHer
  theyThem
}

"""
Representation of the public data for a user's event attendance, used usually for public profiles or 'shareable ticket' pages
"""
type PublicEventAttendance {
  event: Event!
  id: ID!
  userInfo: PublicUserInfo!
}

input PublicEventAttendanceInfo {
  id: String!
}

"""
Representation of a payment log entry
"""
type PublicFinanceEntryRef {
  createdAt: DateTime!
  currencyId: String!
  id: ID!
  platform: String!
  transactionAmount: Float!
  transactionDate: DateTime
}

input PublicTicketInput {
  publicTicketId: String!
}

"""
Representation of a user's publicly accessible data, to be used in public contexts like shareable ticket UIs
"""
type PublicUserInfo {
  firstName: String
  lastName: String
  profilePicture: String
  userName: String!
}

"""
Representation of the public information of a User ticket
"""
type PublicUserTicket {
  id: ID!
  ticket: Ticket!
  userImage: String
  userName: String
  userUsername: String
}

"""
Representation of a Purchase Order
"""
type PurchaseOrder {
  createdAt: DateTime
  currency: AllowedCurrency
  finalPrice: Float
  id: ID!
  paymentLink: String
  paymentPlatform: String
  publicId: String
  purchasePaymentStatus: PurchaseOrderPaymentStatusEnum
  status: PurchaseOrderStatusEnum
  tickets: [UserTicket!]!
}

input PurchaseOrderInput {
  giftInfo: [GiftInfoInput!]!
  quantity: Int!
  ticketId: String!
}

enum PurchaseOrderPaymentStatusEnum {
  not_required
  paid
  unpaid
}

enum PurchaseOrderStatusEnum {
  complete
  expired
  open
}

type Query {
  """
  Get a list of communities. Filter by name, id, or status
  """
  communities(id: String, name: String, status: CommnunityStatus): [Community!]!

  """
  Get a community by id
  """
  community(id: String!): Community

  """
  Get all available companies
  """
  companies(input: SearchCompaniesInput): [Company!]!

  """
  Get all available companies
  """
  company(companyId: String!): Company!

  """
  Get an event by id
  """
  event(id: String!): Event

  """
  Get a list of images, that are attached to an event
  """
  eventImages(input: EventImageSearch!): [SanityAssetRef!]!

  """
  Get a list of user tickets
  """
  findUserTickets(
    input: PaginatedInputFindUserTicketSearchInput!
  ): PaginatedUserTicket!

  """
  Get a single waitlist
  """
  getWaitlist(ticketId: String!): Waitlist!

  """
  Get the current user
  """
  me: User!

  """
  Get a list of purchase orders for the authenticated user
  """
  myPurchaseOrders(
    input: PaginatedInputMyPurchaseOrdersInput!
  ): PaginatedPurchaseOrder!

  """
  Get a list of user ticket gifts received by the current user
  """
  myReceivedTicketGifts: [UserTicketGift!]!

  """
  Get a list of user ticket gifts sent by the current user
  """
  mySentTicketGifts: [UserTicketGift!]!

  """
  Get a list of tickets for the current user
  """
  myTickets(input: PaginatedInputMyTicketsSearchValues!): PaginatedUserTicket!

  """
  Get public event attendance info
  """
  publicEventAttendanceInfo(
    input: PublicEventAttendanceInfo!
  ): PublicEventAttendance

  """
  Get a list of user tickets
  """
  publicTicketInfo(input: PublicTicketInput!): PublicUserTicket!

  """
  Get a list of salaries associated to the user
  """
  salaries: [Salary!]!

  """
  Get a schedule by its ID
  """
  schedule(scheduleId: String!): Schedule!

  """
  Search a consolidated payment logs, by date, aggregated by platform and currency_id
  """
  searchConsolidatedPaymentLogs(
    input: SearchPaymentLogsInput!
  ): [ConsolidatedPaymentLogEntry!]!

  """
  Get a list of events. Filter by name, id, status or date
  """
  searchEvents(input: PaginatedInputEventsSearchInput!): PaginatedEvent!

  """
  Search on the payment logs by date, and returns a list of payment logs
  """
  searchPaymentLogs(input: SearchPaymentLogsInput!): [PublicFinanceEntryRef!]!
  searchTeams(input: PaginatedInputTeamSearchValues!): PaginatedTeamRef!
  status(name: String): String!

  """
  Get a list of tags
  """
  tags(input: TagSearchInput): [Tag!]!

  """
  Get a list of users
  """
  userSearch(input: PaginatedInputUserSearchValues!): PaginatedUser!

  """
  Get a list of users
  """
  users: [User!]!

  """
  Get a workEmail and check if its validated for this user
  """
  workEmail(email: String!): WorkEmail!

  """
  Get a list of validated work emails for the user
  """
  workEmails: [ValidatedWorkEmail!]!

  """
  Get a a work role's seniorities
  """
  workRoleSeniorities(input: WorkRoleSenioritiesInput!): [WorkSeniority!]!

  """
  Get a list of possible work roles
  """
  workRoles: [WorkRole!]!
}

input RSVPFilterInput {
  eventIds: [String!]
}

type RedeemUserTicketError {
  error: Boolean!
  errorMessage: String!
}

union RedeemUserTicketResponse = PurchaseOrder | RedeemUserTicketError

input RejectTeamInvitationInput {
  teamId: String!
}

input RemovePersonFromTeamInput {
  teamId: String!
  userId: String!
}

"""
Representation of a workEmail
"""
type Salary {
  amount: Int!
  company: Company!
  countryCode: String!
  currencyCode: String!
  gender: Gender
  genderOtherText: String
  id: ID!
  typeOfEmployment: TypeOfEmployment!
  workMetodology: WorkMetodology!
  workRole: WorkRole!
  workSeniority: WorkSeniority!
  yearsOfExperience: Int!
}

"""
Representation of a Sanity Asset
"""
type SanityAssetRef {
  assetId: String!
  id: ID!
  originalFilename: String!
  path: String!
  size: Int!
  url: String!
}

"""
Representation of a Schedule
"""
type Schedule {
  description: String
  endTimestamp: DateTime!
  event: Event!
  id: ID!
  sessions: [Session!]!
  startTimestamp: DateTime!
  title: String!
}

input SearchCompaniesInput {
  companyName: String
  description: String
  domain: String
  website: String
}

input SearchPaymentLogsInput {
  endDate: DateTime
  startDate: DateTime!
}

enum SearchableUserTags {
  CORE_TEAM
  DEV_TEAM
  DONOR
}

enum ServiceErrors {
  ALREADY_EXISTS
  CONFLICT
  FAILED_PRECONDITION
  FORBIDDEN
  INTERNAL_SERVER_ERROR
  INVALID_ARGUMENT
  NOT_FOUND
  UNAUTHENTICATED
  UNAUTHORIZED
}

"""
Representation of a Session
"""
type Session {
  description: String
  endTimestamp: DateTime!
  id: ID!
  speakers: [Speaker!]!
  startTimestamp: DateTime!
  title: String!
}

input SessionSearch {
  description: String
  endDate: String
  eventIds: [String!]
  sessionIds: [String!]
  speakerIds: [String!]
  startDate: String
  title: String
}

"""
Representation of a Speaker
"""
type Speaker {
  avatar: String
  bio: String
  company: String
  id: ID!
  name: String!
  rol: String
  sessions: [Session!]!
  socials: [String!]!
}

"""
Representation of a tag. Tags can be associated to many things. An event, a community, etc.
"""
type Tag {
  description: String
  id: ID!
  name: String
  slug: String!
}

input TagSearchInput {
  description: String
  id: String
  name: String
}

input TeamCreateInput {
  description: String
  eventId: String!
  name: String!
}

"""
Representation of a team. This is compsed of a group of users and is attached to a specific event
"""
type TeamRef {
  description: String
  event: Event!
  id: ID!
  name: String!
  status: TeamStatus!
  users: [UserWithStatusRef!]!
}

input TeamSearchValues {
  eventIds: [String!]
  name: String
  status: [TeamStatus!]
  teamIds: [String!]
  userIds: [String!]
}

enum TeamStatus {
  accepted
  invited
  not_accepted
  waiting_resolution
}

"""
Representation of a ticket
"""
type Ticket {
  description: String
  endDateTime: DateTime
  event: Event!
  externalLink: String
  id: ID!
  imageLink: String

  """
  Whether or not the ticket is free
  """
  isFree: Boolean!

  """
  Whether or not the ticket has an unlimited quantity. This is reserved for things loike online events.
  """
  isUnlimited: Boolean!
  name: String!
  prices: [Price!]

  """
  The number of tickets available for this ticket type
  """
  quantity: Int
  quantityLeft: Int
  requiresApproval: Boolean!
  startDateTime: DateTime!
  status: TicketTemplateStatus!
  tags: [String!]!
  visibility: TicketTemplateVisibility!
}

enum TicketApprovalStatus {
  approved
  cancelled
  gift_accepted
  gifted
  not_required
  pending
  rejected
}

input TicketClaimInput {
  """
  If this field is passed, a purchase order payment link will be generated right away
  """
  generatePaymentLink: GeneratePaymentLinkInput

  """
  A unique key to prevent duplicate requests, it's optional to send, but it's recommended to send it to prevent duplicate requests. If not sent, it will be created by the server.
  """
  idempotencyUUIDKey: String @deprecated(reason: "This field is deprecated")
  purchaseOrder: [PurchaseOrderInput!]!
}

input TicketCreateInput {
  description: String
  endDateTime: DateTime
  eventId: String!
  externalLink: String
  imageLink: String

  """
  If the ticket is free, the price submitted will be ignored.
  """
  isFree: Boolean!
  maxTicketsPerUser: Int
  name: String!
  prices: [PricingInputField!]
  quantity: Int
  requiresApproval: Boolean
  startDateTime: DateTime!
  status: TicketTemplateStatus
  tags: [String!]

  """
  If provided, quantity must not be passed. This is for things like online events where there is no limit to the amount of tickets that can be sold.
  """
  unlimitedTickets: Boolean!
  visibility: TicketTemplateVisibility
}

input TicketEditInput {
  description: String
  endDateTime: DateTime
  eventId: String
  name: String
  prices: [PricingInputField!]
  quantity: Int
  requiresApproval: Boolean
  startDateTime: DateTime
  status: TicketTemplateStatus
  ticketId: String!

  """
  If provided, quantity must not be passed. This is for things like online events where there is no limit to the amount of tickets that can be sold.
  """
  unlimitedTickets: Boolean
  visibility: TicketTemplateVisibility
}

enum TicketPaymentStatus {
  not_required
  paid
  unpaid
}

enum TicketRedemptionStatus {
  pending
  redeemed
}

enum TicketTemplateStatus {
  active
  inactive
}

enum TicketTemplateVisibility {
  private
  public
  unlisted
}

enum TypeOfEmployment {
  freelance
  fullTime
  partTime
}

input UpdateCommunityInput {
  communityId: String!
  description: String
  name: String
  slug: String
  status: CommnunityStatus
}

input UpdateCompanyInput {
  companyId: String!
  description: String
  domain: String
  logo: String
  name: String
  website: String
}

input UpdateSalaryInput {
  amount: Int
  confirmationToken: String!
  countryCode: String
  currencyCode: String
  gender: Gender
  genderOtherText: String
  salaryId: String!
  typeOfEmployment: TypeOfEmployment
  workMetodology: WorkMetodology
  workSeniorityAndRoleId: String
  yearsOfExperience: Int
}

input UpdateTeamInput {
  description: String
  name: String
  teamId: String!
}

"""
Representation of a user
"""
type User {
  bio: String
  communities: [Community!]!
  email: String
  id: ID!
  imageUrl: String
  impersonatedUser: User
  isSuperAdmin: Boolean
  lastName: String
  name: String
  pronouns: PronounsEnum

  """
  Get a list of user's RSVPs
  """
  rsvps(input: RSVPFilterInput): [UserTicket!]!
  teams: [TeamRef!]!
  userData: UserData
  username: String!
}

"""
Representation of a user's data
"""
type UserData {
  city: String!
  countryOfResidence: String!
  emergencyPhoneNumber: String
  foodAllergies: String
  organizationName: String
  roleInOrganization: String
  rut: String
  worksInOrganization: Boolean!
}

input UserSearchValues {
  name: String
  tags: [SearchableUserTags!]
  userIds: [String!]
  userName: String
}

enum UserTeamRole {
  leader
  member
}

"""
Representation of a User ticket
"""
type UserTicket {
  approvalStatus: TicketApprovalStatus!
  createdAt: DateTime!
  giftAttempts: [UserTicketGift!]!
  id: ID!
  paymentStatus: PurchaseOrderPaymentStatusEnum
  publicId: String!
  purchaseOrder: PurchaseOrder
  redemptionStatus: TicketRedemptionStatus!
  ticketTemplate: Ticket!
  user: User
}

"""
Representation of a user ticket gift
"""
type UserTicketGift {
  expirationDate: DateTime!
  gifter: GiftTicketUserInfo!
  id: ID!
  receiver: GiftTicketUserInfo!
  status: GiftAttemptStatus!
  userTicket: UserTicket!
}

"""
Representation of a user in a team
"""
type UserWithStatusRef {
  id: ID!
  role: UserTeamRole!
  status: ParticipationStatus!
  user: User!
}

enum ValidPaymentMethods {
  mercado_pago
  stripe
}

"""
Representation of a work email associated to the current user
"""
type ValidatedWorkEmail {
  company: Company
  confirmationDate: DateTime
  id: ID!
  isValidated: Boolean!
  status: EmailStatus!
  workEmail: String!
}

"""
Representation of a waitlist
"""
type Waitlist {
  """
  The ID of the waitlist. It matches the ID of the underlying ticket
  """
  id: ID!
  myRsvp: UserTicket
  ticket: Ticket!
}

enum WaitlistApprovalStatus {
  approved
  pending
  rejected
}

"""
Representation of a (yet to validate) work email
"""
type WorkEmail {
  id: ID!
  isValidated: Boolean!
}

enum WorkMetodology {
  hybrid
  office
  remote
}

"""
Representation of a work role
"""
type WorkRole {
  description: String
  id: ID!
  name: String!
  seniorities: [WorkSeniority!]!
}

input WorkRoleSenioritiesInput {
  workRoleId: String!
}

"""
Representation of a work seniority
"""
type WorkSeniority {
  description: String
  id: ID!
  name: String!
}

input placeHolderUsersInput {
  ciudad: String
  email: String!
  emergencyPhoneNumber: String
  foodAllergies: String
  name: String!
  nombreOrganizacion: String
  pais: String
  rolEnOrganizacion: String
  trabajasEnOrganizacion: String
}

input updateUserDataInput {
  city: String!
  countryOfResidence: String!
  emergencyPhoneNumber: String
  eventId: String!
  foodAllergies: String
  organizationName: String
  roleInOrganization: String
  rut: String
  worksInOrganization: Boolean!
}

input updateUserRoleInCommunityInput {
  communityId: String!
  role: String!
  userId: String!
}

input userEditInput {
  bio: String
  id: String!
  lastName: String
  name: String
  pronouns: PronounsEnum
  username: String
}

/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated using `npm run graphql:types` */
import type * as Types from '../../../generated/types';

import type { JsonObject } from "type-fest";
import gql from 'graphql-tag';
export type EventQueryVariables = Types.Exact<{
  eventId: Types.Scalars['String']['input'];
  eventTickets: Types.InputMaybe<Types.EventsTicketsSearchInput>;
}>;


export type EventQuery = { __typename?: 'Query', event: { __typename?: 'Event', id: string, name: string, description: string | null, visibility: Types.EventVisibility, status: Types.EventStatus, startDateTime: string, endDateTime: string | null, tags: Array<{ __typename?: 'Tag', id: string }>, teams: Array<{ __typename?: 'TeamRef', id: string, users: Array<{ __typename?: 'UserWithStatusRef', id: string, status: Types.ParticipationStatus, role: Types.UserTeamRole, user: { __typename?: 'User', id: string } }> }>, community: { __typename?: 'Community', id: string } | null, users: Array<{ __typename?: 'User', id: string }>, usersTickets: Array<{ __typename?: 'UserTicket', id: string, approvalStatus: Types.TicketApprovalStatus, paymentStatus: Types.PurchaseOrderPaymentStatusEnum | null, redemptionStatus: Types.TicketRedemptionStatus, createdAt: string }> } | null };


export const Event = gql`
    query Event($eventId: String!, $eventTickets: EventsTicketsSearchInput) {
  event(id: $eventId) {
    id
    name
    description
    visibility
    status
    startDateTime
    endDateTime
    tags {
      id
    }
    teams {
      id
      users {
        id
        status
        role
        user {
          id
        }
      }
    }
    community {
      id
    }
    users {
      id
    }
    usersTickets(input: $eventTickets) {
      id
      approvalStatus
      paymentStatus
      redemptionStatus
      createdAt
    }
  }
}
    `;
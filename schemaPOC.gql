# ENUMS
enum TicketStatus {
  ASSIGNED
  RESERVED
  CREATED
  REJECTED
  REDEEMED
}

enum EventStatus {
  ACTIVE
  INACTIVE
}

enum EventVisibility {
  PUBLIC
  HIDDEN
}

# TYPES
"""
information of a specific user
"""
type User {
  id: ID!
  username: String!
  tickets: [Ticket!]!
  communities: [Community!]!
}

type Ticket {
  id: ID!
  activity: [Activity!]!
  status: TicketStatus
  user: User
}

type Event {
  id: ID!
  activity: [Activity!]!
  community: Community
  tickets: [Ticket!]!
  status: EventStatus!
  visibility: EventVisibility!
  tags: [Tag!]!
}

type Community {
  iD: ID!
  events: [Event!]!
  name: String!
  description: String!
  tags: [Tag!]!
  users: [User!]!
}

type Tag {
  id: ID!
  name: String!
  description: String
}

# INPUTS
input UserSearchInput {
  id: ID
  username: String
  email: String
}
input EventSearchInput {
  id: ID
  description: String
  name: String
  tags: [Tag!]
}
input CommunitySearchInput {
  id: ID
  name: String
  email: String
  tags: [Tag!]
}
input TagsSearchInput {
  name: String
}

# QUERIES
type Query {
  user(id: ID!): User
  me: User
  users(input: UserSearchInput): [User!]!
  community(id: ID!): Community
  communities(input: CommunitySearchInput): [Community!]!
  event(id: ID!): Event
  events(input: EventSearchInput): [Event!]!
  searchTags(input: TagsSearchInput): [Tag!]!
}

schema {
  query: Query
}
